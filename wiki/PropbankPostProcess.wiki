#summary Post-process on instances annotated in Jubilee

== 1. How to run post-processing scripts ==

All post-processing scripts are under `/home/verbs/shared/cleardata/scripts`.

=== 1.1. Generate byte indices of tree ===

To generate byte indices of all trees used for Propbank instances, type the following command.

{{{
./generate-byte-index.py <byte file> <tree directory>
}}}

`<tree directory>` is the path of top-level directory that contains all treebank files as in its sub-directories.  `<byte file>` is the output that contains all byte indices of the trees.  For example, if you want to generate a file containing byte indices of all trees in WSJ, type the following command.

{{{
./generate-byte-index.py byte.txt /home/verbs/shared/cleardata/ontonotes/on/english/annotations/parse/nw/wsj
}}}

This will recursively read all trees under `/home/verbs/shared/cleardata/ontonotes/on/english/annotations/parse/nw/wsj` and generate `byte.txt` containing byte indices of all trees in WSJ.

=== 1.2. Post-process Propbank instances ===

Once you created a byte file, you are ready to post-process.  Type the following command to run the post-process script.

{{{
./post-process.py <propbank file> <byte file> <post-processed file>
}}}

`<propbank file>` is an input that contains Propbank instances to be post-processed. `<byte file>` is the output from `generate-byte-index.py`.  `<post-processed file>` is the output that contains post-processed Propbank instances.  The following section describes what things are done during the post-processing.
<br><br>

== 2. Things done by post-processing ==

=== 2.1. Label changes ===

  * ARGM-RCL --> LINK-SLC
  * ARGM-SLC --> LINK-SLC
  * ARGM-PCR --> LINK-PCR

=== 2.2. Traces ===

  * A trace is recognized as a node whose part-of-speech tag is `-NONE-`.
  * A trace must be annotated on a leaf node.  If a trace is annotated on a phrase node, post-process it so it is annotated on the leaf node (except for `*ICH*`, see Section 2.3).  For example, if a trace `*-1` from `(NP (-NONE- *-1))` is to be annotated, the annotation should be on `-NONE-`, not on `NP`.
  * If a trace is marked with an index (trace ID), link the trace with every other phrase marked with the same index in the tree.  For example, if `*T*-1 (8:0)` is annotated as `ARG0` of `was (9:0)`, then it should be linked with `WHNP-1 (7:1)` so that the result is `7:1*8:0`.
{{{
((S
  (NP-SBJ (PRP He))
  (ADVP (RB certainly))
  (VP (VBD did)
      (RB not)
      (VP (VB want)
          (NP
            (NP (DT a) (NN wife))
            (SBAR
              (WHNP-1 (WP who))
              (S
                (NP-SBJ (-NONE- *T*-1))
                (VP (VBD was)
                    (ADJP-PRD
                      (ADJP (JJ fickle))
                      (PP (IN as)
                          (NP (NNP Ann))))))))))
  (. .)))
}}}

=== 2.3. `*`ICH`*` traces ===

  * If a phrase node includes `*ICH*` trace as one of its descendants, take the trace ID of `*ICH*` and chain the phrase with every other phrase marked with the same trace ID.  For example, if `*-3 (4:0)` is annotated as `ARG1` of `given (3:0)`, it is first linked with `NP-SBJ-3 (0:1)` so the result is `0:1*4:0` (see Section 2.2).  Moreover, since `NP-SBJ-3` includes `*ICH*-1 (1:0)` as its descendant, it is again chained with `S-1 (5:2)` so the overall result is `0:1;5:2*4:0`.
{{{
((S
  (NP-SBJ-3 (NNS Orders)
            (S (-NONE- *ICH*-1)))
  (VP (VBD were)
      (VP (VBN given)
          (NP (-NONE- *-3))
          (S-1
            (NP-SBJ (-NONE- *PRO*))
            (VP (TO to)
                (VP (VB dig))))))
  (. .)))
}}}

=== 2.4. LINK-PCR ===

  * When a numbered argument includes only a trace node and itS trace ID (if exists) points to `NP-SBJ`, link the trace node with `NP-SBJ` and annotate the result as `LINK-PCR`.  For the example in Section 2.3 where `*-3 (4:0)` is annotated as `ARG1`, the overall result `0:1;5:2*4:0` is labeled as `LINK-PCR` so that `4:0-ARG1` and `0:1;5:2*4:0-LINK-PCR`.

  * When a numbered argument include `*PRO*` trace, keep the `*PRO*` trace as the numbered argument and annotate all links (including `*PRO*`) as `LINK-PCR`.  For example, if `[automation machines] * [*PRO*-2] (5:1*9:0)` is annotated as `ARG0` of `work (11:0)`, first link `9:0` with `NP-2 (8:1)` (see Section 2.2), keep `9:0` as `ARG0` and annotate all links as `LINK-PCR`, so the result is `9:0-ARG0` and `5:1*8:1*9:0-LINK-PCR`.
{{{
((S
  (PP (IN In)
      (NP (JJ other)
          (NNS words)))
  (, ,)
  (PP-MNR
    (IN like)
    (NP
      (NP (NN automation)
          (NNS machines))
      (VP (VBN designed)
          (NP-2 (-NONE- *))
          (S-CLR
            (NP-SBJ (-NONE- *PRO*-2))
            (VP (TO to)
                (VP (VB work)
                    (PP-MNR (IN in)
                            (NP (NN tandem)))))))))
...
}}}

=== 2.5. LINK-SLC ===

  * When a numbered argument includes `&` operator, keep only the last trace as the numbered argument, link all nodes (including the trace) and annotate the result as `LINK-SLC`.  For example, if the annotation is `0:0&1:0-ARG1` where `1:0` is a trace, it is post-processed to `1:0-ARG1` and `0:0*1:0-LINK-SLC`.

  * (deprecated) When an argument consists of a trace whose (POS-tag word) is `(-NONE- *)` and it is followed by `rel` node and the parent of the trace and all linked nodes are `NP`, keep the trace with the argument label and annotate all links to `LINK-SLC`.  For example, if `[Calloused fingers] * [*] (0:1*4:0)` is annotated as `ARG1` of `caress (3:0)`, check if both `0:1` and `4:1` are `NP` and `4:0` is followed by the `rel (3:0)`.  If it is, keep `4:0` as `ARG1` and annotate `0:1*4:0` as `LINK-SLC`, so the result is `4:0-ARG1` and `0:1*4:0-LINK-SLC`.
{{{

((S
  (NP-SBJ
    (NP (JJ Calloused) (NNS fingers))
    (, ,)
    (VP (VBN caressed)
        (NP (-NONE- *))
        (PP
          (ADVP (RB only))
          (IN by)
          (NP-LGS
            (NP (DT the) (NN smoothness))
            (PP (IN of)
                (NP (VBN polished) (NNS rosaries))))))
}}}

=== 2.6. ARGM-DSP ===

  * If the argument label is `ARGM-DSP`, take the very top-level phrase node and concatenate all leaf nodes under the phrase except for the ones belong to `PRN` phrase.  Then, annotate the concatenation with the same label as the numbered argument, say _A_, that contains the trace linked in `ARGM-DSP`.  Finally, remove the argument _A_ from the annotation.  For example, if we have `0:2*6:0-ARGM-DSP` and `5:1-ARG1`, take the top-level phrase `S (0:2)` and concatenate all leaf nodes under `0:2` except `PRN (6:4)` so the result is `0:0,1:0,8:0,9:0,10:0`.  Then, annotation the concatenation with the label from `SBAR (5:1)` so the result is `0:0,1:0,8:0,9:0,10:0-ARG1`.  Finally, remove `5:1-ARG1` from the annotation so `0:0,1:0,8:0,9:0,10:0-ARG1` is the only `ARG1` in the annotation.
{{{
((S
  (NP-SBJ (PRP$ His)
          (NN heart))
  (PRN
    (, ,)
    (S
      (NP-SBJ (PRP he))
      (VP
        (VBD discovered)
        (SBAR
          (-NONE- 0)
          (S (-NONE- *?*)))))
    (, ,))
  (VP (VBD was)
      (VP (VBG pounding)))
  (. .)))
}}}